#include "stdafx.h"
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <Windows.h>
#include <sstream>
#include <cstring>
#include <fstream>
#include <iostream>
using namespace sf;
using namespace std;
class gamesound;
class PLAYER;
bool gravity(string ** ,int,int, int,int,gamesound&,gamesound&);
int string_to_int(string );
string int_to_string(int );

bool kill(PLAYER&);
string** start(int number_level,int *time_,int *H_,int *W_);
float offsetX=0, offsetY=0;
void delete_map(string**TileMap,int*H);
void show (RenderWindow&,Sprite &,string** TileMap, int *H,int *W,int *diamamt_flash );


class PLAYER {

public:

	float dx,dy;
	FloatRect rect;
	bool onGround;
	Sprite sprite;
	float currentFrame;
	int diamant;
	string**TileMap;
	int live;
	SoundBuffer sound_bufer;
    Sound almaz;
	PLAYER(Texture &image,string **t)
	{
		sprite.setTexture(image);
		sprite.setTextureRect(IntRect(16,0,16,16));
		rect = FloatRect(1*16,1*16,16,16);
		diamant=0;
		dx=dy=0;
		currentFrame = 0;
		TileMap=t;
		live=5;
	
		sound_bufer.loadFromFile("sound/almaz.wav");//загружаем в него звук
	   
		almaz.setBuffer(sound_bufer) ;
	
	}
	

	void update(float time)
	{	
		
			Collision();
		
		rect.left += dx ;	

		rect.top += dy ;


		if (currentFrame > 6) currentFrame -=6 ;

		if (dx>0)sprite.setTextureRect(IntRect(16*int(currentFrame),32,16,16));


		if (dx<0) sprite.setTextureRect(IntRect(16*int(currentFrame)+16,32,-16,16));

        if (dy>0)sprite.setTextureRect(IntRect(16*int(currentFrame),0,16,16));

		if (dy<0) sprite.setTextureRect(IntRect(32,0,16,16));
			
		for (int i=0;i<10;i++){Sleep(time);}
	 currentFrame++;
		sprite.setPosition(rect.left-offsetX, rect.top-offsetY);
	//td::cout<<(rect.left-offsetX)/16<<" "<<std::endl;
		dx=0;
		dy=0;
	}



	void Collision()
	{   
			int i = (rect.top)/16;

		    int j =(rect.left)/16;
		
					if (dx>0&& (TileMap[i][j+1]=='W'||TileMap[i][j+1]=='H'||TileMap[i][j+1]=='R'))  {dx=0;return;}  //проверка на столкновение
					if (dx<0&& (TileMap[i][j-1]=='W'||TileMap[i][j-1]=='H'||TileMap[i][j-1]=='R')) {dx=0;return;}
					if (dy>0&& (TileMap[i+1][j]=='W'||TileMap[i+1][j]=='H'||TileMap[i+1][j]=='R')) {dy=0;return;} 
					if (dy<0&& (TileMap[i-1][j]=='W'||TileMap[i-1][j]=='H'||TileMap[i-1][j]=='R')) { dy=0;return;}
							
				if (TileMap[i][j]=='D') 
				{    
					diamant+=1;// собираем кристал
					TileMap[i][j]=' ';
				almaz.play();
				}

	 if((dx+dy)!=0)TileMap[i][j]=' ';					

	}
};

class gamesound{
public:
	SoundBuffer sound_bufer;
	Sound sound;
	string filename;

	gamesound (string filename_){
		filename=filename_;
		sound_bufer.loadFromFile(filename);//загружаем в него звук
		sound.setBuffer (sound_bufer); //создаем звук и загружаем в него звук из буфера

	}
	void play(){
	sound.play();
	}
   
};

int _tmain(int argc, _TCHAR* argv[])
{
	 setlocale(LC_ALL, "Russian");

	 gamesound sound_step1("sound/step1.wav");
	 gamesound sound_step2("sound/step2.wav");
	 gamesound sound_stone("sound/stone.wav");
	 gamesound sound_stone_left("sound/stone_left.wav");
     gamesound sound_life("sound/life2.wav");
	 gamesound sound_almaz("sound/almaz.wav");
	 
	 int time=10,H,W;
	int number_level=1;
	bool gameover(false);
    bool rockfall=false; //пропуск первой проверки
    string **TileMap=start(number_level,&time,&H,&W);
   int pldy=0;
	RenderWindow window( VideoMode(400, 225), "boulder dash");

	Texture t;
	t.loadFromFile("fang.png");

	Sprite map(t);


	float currentFrame=0;

	PLAYER mario(t,TileMap);
    
//	Clock clock;
	bool button_no_press = true;

	int diamamt_flash=0;
	while (window.isOpen())

	{

		Event event;
		while (window.pollEvent(event)){
			if (event.type == Event::Closed)
				
				window.close();
		}
	

		if (button_no_press && Keyboard::isKeyPressed(Keyboard::Add )) time+=1;


		if (Keyboard::isKeyPressed(Keyboard::Subtract  )) time-=1;
		
		if (time<0)time=0;
	
		button_no_press = true;
		

		if (button_no_press && Keyboard::isKeyPressed(Keyboard::Left)) {mario.dx = -16; sound_step1.play();button_no_press= false;}

		if (button_no_press && Keyboard::isKeyPressed(Keyboard::Right)){ mario.dx = 16;sound_step1.play(); button_no_press= false;}

		if (button_no_press && Keyboard::isKeyPressed(Keyboard::Up)) {mario.dy=-16;sound_step2.play(); button_no_press= false;}
		
		if (button_no_press && Keyboard::isKeyPressed(Keyboard::Down)) {mario.dy=16;sound_step2.play(); button_no_press= false;}
		
		if (mario.dx+mario.dy==0)mario.sprite.setTextureRect(IntRect(16,0,16,16));

		if (mario.rect.left>208) offsetX = mario.rect.left - 208;// установка игрока по центру
		else offsetX=0;
		
		if (mario.rect.top>123)offsetY = mario.rect.top - 123;
        else offsetY=0;
	    
			window.clear(Color(25,29,25));
		  cout <<pldy<<" "<<mario.dy<<endl;  
		  if (pldy-mario.dy==0){rockfall=true; pldy=mario.dy;}
		  else {rockfall=false;pldy=mario.dy;}
			mario.update(time);

		show(window,map,TileMap,&H,&W,&diamamt_flash);
		cout <<rockfall<<endl;

			if (rockfall){        //
			for (int i=H-1; i>0; i--){
				for (int j=W-1; j>0 ; j--) {

					if (TileMap[i][j]=='R'){
					
						if(gravity(TileMap,i,j,mario.rect.left/16,mario.rect.top/16,sound_stone_left,sound_stone)){
						
					 int x,y;	
					 for(int c=0;c<3;c++){ 
						for (int i_=0;i_<3;i_++){
							for (int j_=0;j_<3;j_++){
					
						y=i_-1+mario.rect.left/16;
						x=j_-1+mario.rect.top/16;
			
						if (TileMap[x][y]!='H')	TileMap[x][y] = int_to_string(c);
							
							}
						
						}
					 
						show(window,map,TileMap,&H,&W,&diamamt_flash);
						window.display();
						for (int t=0;t<30;t++){Sleep(time);}
					 }
	               
					
					  gameover=kill(mario);

						delete_map(TileMap,&H);
						TileMap=start(number_level, &time , &H , &W );
						mario.TileMap=TileMap;
						mario.rect = FloatRect(1*16,1*16,16,16);
						}
					}
				}
		}
			}
		//  rockfall=true;// пропуск одного камня

		

			diamamt_flash+=1;
			if(diamamt_flash>7)diamamt_flash=0;
		  
			
			window.draw(mario.sprite);
       
			std::ostringstream shift;    // объявили переменную
			shift << mario.diamant;
 			Font font;//шрифт 
			font.loadFromFile("CyrilicOld.ttf");//передаем нашему шрифту файл шрифта
 			
			Text text1("", font,14);//создаем объект текст. закидываем в объект текст строку, шрифт, размер шрифта(в пикселях);//сам объект текст (не строка)
 			 text1.setColor(Color::White);//покрасили текст в красный. если убрать эту строку, то по умолчанию он белый
 			// text.setStyle(sf::Text::Bold | sf::Text::Underlined);//жирный и подчеркнутый текст. по умолчанию он "худой":)) и не подчеркнутый
 			 text1.setString("Собрано камней:"+shift.str());//задает строку тексту
			 text1.setPosition(0, 0);
			 window.draw(text1);
			 
			 Text text2("", font,14);
             shift.str("");
			 shift<<time;
		   	text2.setPosition(140, 0);//задаем позицию текста, центр камеры
			 text2.setString(" скорость игры "+shift.str());
 			 window.draw(text2);//рисую этот текст
 				
			 Text text3("", font,14);
			 shift.str("");
			 shift<<mario.live;
			 text3.setPosition(250, 0);//задаем позицию текста, центр камеры
			 text3.setString(" жизнь "+shift.str());
			 window.draw(text3);//рисую этот текст


			 window.display();
			 if (gameover){
				 delete_map(TileMap,&H);
              while(1){
				 window.clear(Color(25,29,25));
				 Text text2("", font,40);
		
			
				 text2.setPosition(80, 80);//задаем позицию текста, центр камеры
				 text2.setString(" GAME  OVER ");
				 window.draw(text2);//рисую этот текст
				 while (window.pollEvent(event)){
					 if (event.type == Event::Closed)
						 window.close();}
				   window.display();
				   if (Keyboard::isKeyPressed(Keyboard::Escape)||Keyboard::isKeyPressed(Keyboard::Return))break;
			  }
				break;
			 }

				
	}	


	return 0;
}


bool gravity(string **TileMap,int i,int j, int plx,int ply,gamesound &stone_left,gamesound &stone){

		
		
	if (TileMap[i+1][j]=='R'||TileMap[i+1][j]=='W'){
		if(TileMap[i+1][j+1]==' '&&TileMap[i][j+1]==' '){
			TileMap[i+1][j+1]=TileMap[i][j];
			TileMap[i][j]=' ';
			stone_left.play();
			return false;
		}
		if(TileMap[i+1][j-1]==' '&&TileMap[i][j-1]==' '){
			TileMap[i+1][j-1]=TileMap[i][j];
			TileMap[i][j]=' ';
			stone_left.play();
			return false;
		}
  
	}
if (TileMap[i+1][j]!=' ')return false;
std::cout<<j<<" "<<plx<<" "<<i<<" "<< ply<<" "<<endl; 	
if(j==plx&&i+2==ply)return true;
	 TileMap[i+1][j]=TileMap[i][j];
	 TileMap[i][j]=' ';
	 stone.play();

	 
	 return false;
}

int string_to_int(string s){
	int n=0;
	stringstream ss;
	ss<<s;
	ss>>n;
	return n;

}
string int_to_string(int n){
	string s;
	stringstream ss;
	ss<<n;
	ss >>s;
	return s;
}
bool kill(PLAYER &p){
	 
	p.live--;
	 if (p.live==0)return true;

 return false;
}
string** start(int number_level,int *time_,int *H_,int *W_){
	

	int time,H,W;
	string temp="";
	string level="level";
	level+=int_to_string(number_level);
	level+=".map";

	std::ifstream  fil(level); // (ВВЕЛИ НЕ КОРРЕКТНОЕ ИМЯ ФАЙЛА)
	if (!fil.is_open()){ // если файл не открыт
		std:: cout << "not file map!\n"; // сообщить об этом
		getchar();    
		exit(0);

	}
	getline(fil,temp,'\n');
	time=string_to_int(temp);
	getline(fil,temp,'\n');
	H=string_to_int(temp);
	getline(fil,temp,'\n');
	W=string_to_int(temp);

	string  **TileMap = new string  *[H];
	for (int i = 0; i < H; i++) {          // двумерный
		TileMap[i] = new string [W]; // массив 
	}   

	int i=0;
	temp="";
	while(i<H) {// считываем карту

		getline(fil,temp,'\n');
		if(temp.length()!=W){
			cout<<"wrong map file!";
			getchar();
			exit(0);


		}
		for(int j=0;j<W;j++){
			TileMap[i][j]=temp[j];
		}
		temp="";

		i++;
	}
	if (i!=H){
		cout<<"wrong map file!";
		getchar();
		exit(0);


	}
	fil.close(); // закрываем файл
	
	*time_=time;
	*H_=H;
	*W_=W;
	return TileMap;
}
void delete_map(string** TileMap,int *H_){
	int H=*H_;
	for (int i = 0; i < H; i++) {          // двумерный
		delete [] TileMap[i];
	}  
	delete[]TileMap;


}
void show(RenderWindow& window, Sprite & sprite,string** TileMap, int *H,int *W, int *diamamt_flash){

	for (int i=0; i<*H; i++)
		for (int j=0; j<*W ; j++) 
		{ 
			if (TileMap[i][j]=='W')    sprite.setTextureRect(IntRect(32,48,16,16));   ///rectangle.setFillColor(Color::Black);

			if (TileMap[i][j]=='D')  sprite.setTextureRect(IntRect(*diamamt_flash*16,128,16,16));     //rectangle.setFillColor(Color::Green);


			if (TileMap[i][j]=='H')    sprite.setTextureRect(IntRect(0,48,16,16));

			if (TileMap[i][j]=='-')    sprite.setTextureRect(IntRect(64,48,16,16));

			if (TileMap[i][j]=='R')    sprite.setTextureRect(IntRect(80,48,16,16));

		    if (TileMap[i][j]=='0')    sprite.setTextureRect(IntRect(112,96,16,16));

			if (TileMap[i][j]=='1')    sprite.setTextureRect(IntRect(112,80,16,16));
		
			if (TileMap[i][j]=='2')    sprite.setTextureRect(IntRect(112,64,16,16));

			if (TileMap[i][j]==' '){continue;}

			sprite.setPosition(j*16-offsetX,i*16-offsetY ) ; 
			window.draw(sprite);

		}
}
